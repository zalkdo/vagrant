vagrant_AIP_version = "2"

Vagrant.configure(vagrant_AIP_version) do |config|

  # kube-master setting
  config.vm.define:"kube-master" do |cfg|
    cfg.vm.box = "hashicorp/bionic64"
    cfg.vm.provider "hyperv"
    cfg.vm.provider :hyperv do |h|
      h.vmname = "kube-master"
      h.maxmemory = 2048
      h.enable_virtualization_extensions = true
      h.linked_clone = true
    end
    cfg.vm.host_name="kube-master"          # linux에서 설정될 hostname
    cfg.vm.synced_folder ".", "/vagrant", disabled: true #Host와 가상머신의 디렉토리 공유 사용안함
    cfg.vm.provision "shell", path: "./scripts/static.master.sh"
    cfg.vm.provision "shell", path: "./scripts/client/client_sshd_setting.sh"
    cfg.vm.provision "shell", inline: "netplan apply"
  end
  
  # kube-node1 setting
  config.vm.define:"kube-node1" do |cfg|
    cfg.vm.box = "hashicorp/bionic64"
    cfg.vm.provider "hyperv"
    cfg.vm.provider :hyperv do |h|
      h.vmname = "kube-node1"
      h.maxmemory = 2048
      h.enable_virtualization_extensions = true
      h.linked_clone = true
    end
    cfg.vm.host_name="kube-node1"          # linux에서 설정될 hostname
    cfg.vm.synced_folder ".", "/vagrant", disabled: true #Host와 가상머신의 디렉토리 공유 사용안함
    cfg.vm.provision "shell", path: "./scripts/static.node1.sh"
    cfg.vm.provision "shell", path: "./scripts/client/client_sshd_setting.sh"
    cfg.vm.provision "shell", inline: "netplan apply"
  end
  
  # kube-node2 setting
  config.vm.define:"kube-node2" do |cfg|
    cfg.vm.box = "hashicorp/bionic64"
    cfg.vm.provider "hyperv"
    cfg.vm.provider :hyperv do |h|
      h.vmname = "kube-node2"
      h.maxmemory = 2048
      h.enable_virtualization_extensions = true
      h.linked_clone = true
    end
    cfg.vm.host_name="kube-node2"          # linux에서 설정될 hostname
    cfg.vm.synced_folder ".", "/vagrant", disabled: true #Host와 가상머신의 디렉토리 공유 사용안함
    cfg.vm.provision "shell", path: "./scripts/static.node2.sh"
    cfg.vm.provision "shell", path: "./scripts/client/client_sshd_setting.sh"
    cfg.vm.provision "shell", inline: "netplan apply"
  end
  
  # ansible-master setting
  config.vm.define:"ansible-master" do |cfg|
    cfg.vm.box = "hashicorp/bionic64"
    cfg.vm.provider "hyperv"
    cfg.vm.provider :hyperv do |h|
      h.vmname = "ansible-master"
      h.maxmemory = 2048
      h.enable_virtualization_extensions = true
      h.linked_clone = true
    end
    cfg.vm.host_name="ansible-master"          # linux에서 설정될 hostname
    cfg.vm.synced_folder ".", "/vagrant", disabled: true #Host와 가상머신의 디렉토리 공유 사용안함
    cfg.vm.provision "shell", path: "./scripts/static.network.sh"
    cfg.vm.provision "shell", inline: "netplan apply"
    cfg.vm.provision "shell", path: "./scripts/ansible_install.sh"
    cfg.vm.provision "file", source: "./scripts/ansible_setting.yml", destination: "ansible_setting.yml"
    cfg.vm.provision "shell", inline: "ansible-playbook ansible_setting.yml"       #ansible inventory 정보를 host에 등록
    cfg.vm.provision "file", source: "./scripts/add_known_hosts.yml", destination: "add_known_hosts.yml"
    cfg.vm.provision "shell", inline: "ansible-playbook add_known_hosts.yml"       #known hosts에 node별 key값 등록하여 ssh접속 가능하게 함.
    cfg.vm.provision "shell", path: "./scripts/client_knowhost_setting.sh", privileged: false #ssh접속으로 health check
  end
end